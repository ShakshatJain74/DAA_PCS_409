#include <iostream>
#include <cmath>
using namespace std;

pair<bool, int> jumpsearch(int arr[], int n, int key)
{
    int end = 2, prev = 0, comparisons = 0;
    while (arr[prev] < key)
    {
        comparisons += 1;
        prev = end;
        end += 2;
        if (prev >= n)
            return make_pair(false, comparisons);
    }
    while (prev < min(end, n))
    {
        comparisons += 1;
        if (arr[prev] == key)
        {
            return make_pair(true, comparisons);
        }
        prev++;
    }
    return make_pair(false, comparisons);
}

int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        int n;
        cin >> n;

        int arr[n];
        for (int i = 0; i < n; ++i)
        {
            cin >> arr[i];
        }

        int key;
        cin >> key;

        pair<bool, int> result = jumpsearch(arr, n, key);

        if (result.first)
        {
            cout << "Present";
        }
        else
        {
            cout << "Not Preset";
        }

        cout << " " << result.second << endl;
    }

    return 0;
}